"""
Return (top,bottom) of good slices
	top: first good slice
	bottom: last good slice

Use
	import aicsBlankSlices

	path = '/media/cudmore/data/san-density/SAN3/SAN3_head/aicsAnalysis/SAN3_head_ch1_mask.tif'
	(top, bottom) = getTopBottom(path)
"""

# top/bottom was manually generated by looking for 'good' slices in rgb image
# bad slices are (i) dim, (ii) contain lots of endocardium, (iii) contain little hcn4 labelling

aicsBlankSlicesDict = {}

#
# san1
# head
keyStr = 'SAN1_head'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 18
aicsBlankSlicesDict[keyStr]['bottom'] = 39
# mid
keyStr = 'SAN1_mid'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 39
aicsBlankSlicesDict[keyStr]['bottom'] = 66
# tail
keyStr = 'SAN1_tail'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 32
aicsBlankSlicesDict[keyStr]['bottom'] = 56

#
# san2
# head
keyStr = 'SAN2_head'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 17
aicsBlankSlicesDict[keyStr]['bottom'] = 39
# mid
keyStr = 'SAN2_mid'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 49
aicsBlankSlicesDict[keyStr]['bottom'] = 64
# tail
keyStr = 'SAN2_tail'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 26
aicsBlankSlicesDict[keyStr]['bottom'] = 44

#
# san3
# head
keyStr = 'SAN3_head'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 25
aicsBlankSlicesDict[keyStr]['bottom'] = 43
# mid
keyStr = 'SAN3_mid'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 33
aicsBlankSlicesDict[keyStr]['bottom'] = 42
# tail
keyStr = 'SAN3_tail'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 21
aicsBlankSlicesDict[keyStr]['bottom'] = 31

#
# san4
# head
keyStr = 'SAN4_head'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 37
aicsBlankSlicesDict[keyStr]['bottom'] = 59
# mid
keyStr = 'SAN4_mid'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 69
aicsBlankSlicesDict[keyStr]['bottom'] = 88
# tail
keyStr = 'SAN4_tail'
aicsBlankSlicesDict[keyStr] = {}
aicsBlankSlicesDict[keyStr]['top'] = 27
aicsBlankSlicesDict[keyStr]['bottom'] = 43

##############################################################################
import os

def getCondList(sanNumber, channel):
	"""
	get list of path like
		'/media/cudmore/data/san-density/SAN3/SAN3_head/aicsAnalysis/SAN3_head_ch2.tif'

	sanNumber: from (1,2,3,4)
	channel: from (1,2)
	"""
	gBasePath = '/media/cudmore/data/san-density'
	sanStr = f'SAN{sanNumber}'
	channelStr = f'_ch{channel}'
	pathList = []
	headMidTail = ['head', 'mid', 'tail']
	for hmt in headMidTail:
		fileName = f'{sanStr}_{hmt}{channelStr}.tif'
		path = os.path.join(gBasePath, sanStr, f'{sanStr}_{hmt}', 'aicsAnalysis', fileName)
		pathList.append(path)
	return pathList

def blankOutStack(stackData, maskStart, maskStop, fillValue=False, verbose=False):
	"""
	blank out slices above/below mastStart/maskStop

	params:
		stackData: numpy ndarray, usually (slices, rows, cols)
		maskStart: first good slice
		maskStop: last good slice
		fillValue: in (False, np.nan)
	return:
		copy of stackData with slice above/below start/stop with values fillValues
	"""

	# work on a copy
	blankedStack = stackData.copy()

	if maskStart is not None:
		if verbose: print(f'  blankOutStack() is excluding mask slices 0:{maskStart}')
		blankedStack[0:maskStart, :, :] = fillValue # in (False, np.nan)
	if maskStop is not None:
		if verbose: print(f'  blankOutStack() is excluding mask slices {maskStop}+1:-1')
		blankedStack[maskStop+1:-1, :, :] = fillValue # in (False, np.nan)

	return blankedStack

def _getKeyFromPath(path):
	"""
	path is like:
		/media/cudmore/data/san-density/SAN3/SAN3_head/aicsAnalysis/SAN3_head_ch1.tif
		/media/cudmore/data/san-density/SAN3/SAN3_head/aicsAnalysis/SAN3_head_ch1_mask.tif
	"""
	basePath, fileName = os.path.split(path)
	baseKeyName = fileName.replace('_ch1.tif', '')
	baseKeyName = baseKeyName.replace('_ch2.tif', '')
	baseKeyName = baseKeyName.replace('_ch1_mask.tif', '')
	baseKeyName = baseKeyName.replace('_ch2_mask.tif', '')

	return baseKeyName

def getTopBottom(path):
	keyStr = _getKeyFromPath(path)
	if keyStr not in aicsBlankSlicesDict.keys():
		print(f'ERROR: aicsBlankSlices.getTopBottom() did not find key {keyStr} for path {path}')
		return (None, None)
	else:
		topBottomDict = aicsBlankSlicesDict[keyStr]
		top = topBottomDict['top']
		bottom = topBottomDict['bottom']
		#theRetTuple = (top, bottom)
		return (top, bottom)

if __name__ == '__main__':
	# debug
	if 0:
		path = '/media/cudmore/data/san-density/SAN3/SAN3_head/aicsAnalysis/SAN3_head_ch1_mask.tif'
		(top, bottom) = getTopBottom(path)
		print('top:', top)
		print('bottom:', bottom)

	if 1:
		sanNumber = 4
		channel = 1
		condList = getCondList(sanNumber, channel)
		for path in condList:
			print(path)
